public const string CAR_RENTAL_DESC = "0A106361725F72656E74616C2E70726F746F";
syntax = "proto3";

package car_rental;

// Enum for car status
enum CarStatus {
  AVAILABLE = 0;
  UNAVAILABLE = 1;
}

// Message for a Car
message Car {
  string make = 1;
  string model = 2;
  int32 year = 3;
  float daily_price = 4;
  int32 mileage = 5;
  string plate = 6;
  CarStatus status = 7;
}

// Message for a User
message User {
  string user_id = 1;
  string name = 2;
  string role = 3;  // "CUSTOMER" or "ADMIN"
}

// Message for a CartItem (temporary rental selection)
message CartItem {
  string plate = 1;
  string start_date = 2;  // YYYY-MM-DD
  string end_date = 3;    // YYYY-MM-DD
}

// Message for a Reservation
message Reservation {
  string reservation_id = 1;
  string user_id = 2;
  string plate = 3;
  string start_date = 4;
  string end_date = 5;
  float total_price = 6;
}

// Request and Response for add_car
message AddCarRequest {
  string user_id = 1;  // Admin's user_id
  Car car = 2;
}
message AddCarResponse {
  string plate = 1;
  string message = 2;  // e.g., "Car added successfully"
}

// Request and Response for create_users (stream users)
message CreateUsersResponse {
  string message = 1;  // e.g., "Users created successfully"
}

// Request and Response for update_car
message UpdateCarRequest {
  string user_id = 1;
  Car car = 2;  // Updated fields, plate must match existing
}
message UpdateCarResponse {
  string message = 1;
}

// Request and Response for remove_car (returns stream of remaining cars)
message RemoveCarRequest {
  string user_id = 1;
  string plate = 2;
}

// Request and Response for list_available_cars (stream cars)
message ListAvailableCarsRequest {
  string user_id = 1;
  string filter = 2;  // Optional, e.g., "Toyota" or "2020"
}

// Request and Response for search_car
message SearchCarRequest {
  string user_id = 1;
  string plate = 2;
}
message SearchCarResponse {
  Car car = 1;
  string message = 2;  // If not available
}

// Request and Response for add_to_cart
message AddToCartRequest {
  string user_id = 1;
  CartItem item = 2;
}
message AddToCartResponse {
  string message = 1;
}

// Request and Response for place_reservation
message PlaceReservationRequest {
  string user_id = 1;
}
message PlaceReservationResponse {
  repeated Reservation reservations = 1;  // List of confirmed reservations
  float total_price = 2;
  string message = 3;
}

// Request and Response for list_reservations (admin, stream reservations)
message ListReservationsRequest {
  string user_id = 1;  // Admin only
}
 
// The gRPC service
service CarRentalService {
  rpc addCar(AddCarRequest) returns (AddCarResponse);
  rpc createUsers(stream User) returns (CreateUsersResponse);
  rpc updateCar(UpdateCarRequest) returns (UpdateCarResponse);
  rpc removeCar(RemoveCarRequest) returns (stream Car);
  rpc listAvailableCars(ListAvailableCarsRequest) returns (stream Car);
  rpc searchCar(SearchCarRequest) returns (SearchCarResponse);
  rpc addToCart(AddToCartRequest) returns (AddToCartResponse);
  rpc placeReservation(PlaceReservationRequest) returns (PlaceReservationResponse);
  rpc listReservations(ListReservationsRequest) returns (stream Reservation);
}