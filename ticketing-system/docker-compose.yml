

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ticketing-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"  # Expose for local tools (e.g., Workbench)
    volumes:
      - mysql-data:/var/lib/mysql  # Persist data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql  # Auto-run schema on first start
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper (for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: ticketing-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: ticketing-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ballerina Services (Generic Dockerfile for all)
  passenger-service:
    build:
      context: ./passenger-service
      dockerfile: ../Dockerfile  # Shared Dockerfile in root
    container_name: ticketing-passenger
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BROKERS}
    ports:
      - "${PASSENGER_PORT}:8080"

  transport-service:
    build:
      context: ./transport-service
      dockerfile: ../Dockerfile
    container_name: ticketing-transport
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BROKERS}
    ports:
      - "${TRANSPORT_PORT}:8080"

  ticketing-service:
    build:
      context: ./ticketing-service
      dockerfile: ../Dockerfile
    container_name: ticketing-ticketing
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BROKERS}
    ports:
      - "${TICKETING_PORT}:8080"

  payment-service:
    build:
      context: ./payment-service
      dockerfile: ../Dockerfile
    container_name: ticketing-payment
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BROKERS}
    ports:
      - "${PAYMENT_PORT}:8080"

  notification-service:
    build:
      context: ./notification-service
      dockerfile: ../Dockerfile
    container_name: ticketing-notification
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BROKERS}
    ports:
      - "${NOTIFICATION_PORT}:8080"

  admin-service:
    build:
      context: ./admin-service
      dockerfile: ../Dockerfile
    container_name: ticketing-admin
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BROKERS}
    ports:
      - "${ADMIN_PORT}:8080"

# Volumes for persistence
volumes:
  mysql-data:
  zookeeper-data:
  kafka-data: